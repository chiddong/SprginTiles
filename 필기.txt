
- DB 사용 > MyBatis + log4j

1. pom.xml
	- MyBatis
	- log4j
	- lombok
	

REST API or RESTful API > Spring REST

REST, Representational State Transfer
- 웹상의 자원(문서(html,jsp등), 이미지, 동영상, 데이터 등)을 자원명으로 표시해서 자원의 상태를 주고 받는 행동
- HTTP URI를 통해서 자원을 명시하고, HTTP Method를 통해서 해당 자원에 대한 CRUD를 처리하는 방식


웹 사이트 개발 
1. SSR
	- Server Side Rendering > 서버측에서 HTML 페이지를 제작
	- Servlet/JSP, Spring/JSP
	- 서버 역할: 모든 업무(DB 등)와 페이지 제작을 한다. > 서버가 일을 많이 한다.
	- 클라이언트 역할: 서버가 제공해준 페이지를 소비한다. > 클라이언트는 일이 많이 없다.
	- 초기 ~ 현재
	
2. CSR
	- Client Side Rendering > 클라이언트측에서 HTML 페이지를 제작
	- Ajax > 서버로부터 순수 데이터(XML,JSON)만 수신 > 데이터 + 태그 > 화면 출력
		> JavaScript Framework > Angular, Vue, React > CSR
	- 서버 역할: 모든 업무(DB 등)를 한다. > 페이지 작업을 안한다. > 서버가 할 일이 줄어든다.
	- 클라이언트 역할: 서버와 통신 > 모든 데이터 입출력 작업을 한다. + 페이지 작업을 한다. + 클라이언트가 일이 늘어난다.
	- ES6 이후~
	- 일부 일반 사이트 사용, 앱(*******)
	
	
	
이전 구현 방식 vs REST 방식 > URI 작성법 차이(******)

[게시판 구현]

1. 이전 구현 방식
	- 목록보기 	GET			http://localhost/board/list.do
	- 추가하기	POST		http://localhost/board/add.do
	- 수정하기	POST		http://localhost/board/edit.do
	- 삭제하기	POST		http://localhost/board/del.do
	- 검색하기	GET			http://localhost/board/list.do?word=검색어

2. REST 방식(***)	> 메소드가 다르므로, 주소가 같아도 된다.
	- 목록보기	GET			http://localhost/board		
	- 추가하기	POST		http://localhost/board		
	- 수정하기	PUT			http://localhost/board/1
	- 삭제하기 	DELETE		http://localhost/board/1
	- 검색하기	GET			http://localhost/board/검색어
	

REST API 설계 규칙

1. URI에서 자원을 표시한다. > 마지막 단어 = 자원

2. URI에서 동사를 표시하지 않는다.

3. HTTP Method를 사용해서 행동을 표현한다.
	- 2번에서 동사를 사용 안함 > 대신 표현하기 위한 수단
	a. GET 		: 리소스 요청
	b. POST	: 데이터 전달 + 서버측 생성
	c. PUT		: 데이터 전달 + 서버측 수정(전체 수
	d. PATCH	: 데이터 전달 + 서버측 수정(일부 수정)
	e. DELETE	: 데이터 전달 + 서버측 삭제
	
4. URI + HTTP Method = REST API

5. 구분자는 '/'를 사용한다.

6. URI의 마지막에 '/'를 적지 않는다.	

7. '-' 사용 가능하다. (비권장)

8. '_' 사용하지 않는다. (비권장)

9. 소문자로 작성한다.

10. 확장자를 작성하지 않는다.

11. REST API의 반환값은 순수 데이터만 반환한다.
	- 기존 서비스 	> 반환 데이터 > 페이지 소스
	- REST서비스 	> 반환 데이터 > 순수 데이터 (= Ajax 요청 반환값과 동일)
	- ***** REST API 목적 > 클라이언트의 다양성을 지원하기 위해서
	
12. Open API
	- 요청 > XML, JSON > 순수 데이터 제공
	- 대부분의 Open API들이 REST 방식을 지원한다.
	
파일 생성
- Spring REST > "db.sql"

- com.test.rest	> "AddressController.java"
						> "AddressDAO.java"
						> "AddressDTO.java"
						
- views > JSP(X)

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

